/**
 * Î¨¥Ïû•Ïï† Ïó¨Ìñâ ÏΩîÏä§ ÏÉùÏÑ±/Ìé∏Ïßë ÌéòÏù¥ÏßÄ
 * 
 * Ï£ºÏöî Í∏∞Îä•:
 * 1. Ïó¨Ìñâ ÏΩîÏä§ Ï†ïÎ≥¥ ÌëúÏãú (ÏßÄÏó≠, ÎÇ†Ïßú, ÏùºÏ∞®Î≥Ñ ÏùºÏ†ï)
 * 2. Ïû•ÏÜå Í¥ÄÎ¶¨ (ÏàúÏÑú Î≥ÄÍ≤Ω, ÏÇ≠Ï†ú)
 * 3. Íµ¨Í∏Ä ÏßÄÎèÑ Ïó∞Îèô Î∞è Í≤ΩÎ°ú ÌëúÏãú
 * 4. Î¨¥Ïû•Ïï† ÏãúÏÑ§ Ï†ïÎ≥¥ ÌëúÏãú
 */

// ÌïÑÏàò ÎùºÏù¥Î∏åÎü¨Î¶¨ import
import React, { useEffect, useState, useRef } from "react";
import Header from "../layout/Header"; // ÏÉÅÎã® Í≥µÌÜµ Header
import "../css/CourseCreatePage.css"; // Ïä§ÌÉÄÏùº import
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd"; // ÎìúÎûòÍ∑∏Ïï§ÎìúÎ°≠ ÎùºÏù¥Î∏åÎü¨Î¶¨

// Ïû•ÏÜå ÌÉÄÏûÖÎ≥Ñ Ïù¥Î™®ÏßÄ Îß§Ìïë - UIÏóê ÌëúÏãúÎê† ÏïÑÏù¥ÏΩò Ï†ïÏùò
const placeTypeToEmoji = {
  "ÌïúÏãùÎãπ": "üç¥ ÏãùÎãπ",
  "Ïπ¥Ìéò": "‚òï Ïπ¥Ìéò",
  "Í≥µÏõê": "üèûÔ∏è Í≥µÏõê",
  "Î∞ïÎ¨ºÍ¥Ä": "üèõÔ∏è Î∞ïÎ¨ºÍ¥Ä",
  "Ìò∏ÌÖî": "üè® ÏàôÏÜå",
  "Î∞±ÌôîÏ†ê": "üè¨ ÏáºÌïë",
  "Í≥µÏó∞ÏòàÏà† Í∑πÏû•": "ÔøΩÔøΩ Í≥µÏó∞Ïû•",
};

// ÌÖåÏä§Ìä∏Ïö© Îç∞Ïù¥ÌÑ∞
const mockCourseData = {
  recommended_courses: [
    {
      course_name: "ÏΩîÏä§ 1: Ïò® Í∞ÄÏ°±ÏùÑ ÏúÑÌïú Î¨¥Ïû•Ïï† ÎßõÏßë & Î∞îÎã§ Ïó¨Ìñâ",
      days: [
        {
          day: 1,
          itinerary: [
            {
              time: "Ïò§Ï†Ñ 9:00",
              place_name: "ÎÇòÎßâÏßë",
              place_type: "ÌïúÏãùÎãπ",
              description: "ÎØ∏ÏâêÎ¶∞ Í∞ÄÏù¥Îìú ÏÑ†Ï†ïÎêú Í≥∞ÌÉï ÎßõÏßë",
              coordinates: {
                latitude: 35.1342484706,
                longitude: 129.1125849531
              },
              accessibility_features: {
                wheelchair_accessible_parking: "Ïû•Ïï†Ïù∏ Ï£ºÏ∞®Ïû• ÏûàÏùå (3Î©¥)",
                wheelchair_accessible_restroom: "Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§ ÏûàÏùå"
              }
            },
            {
              time: "Ïò§Ï†Ñ 11:00",
              place_name: "Íµ≠Î¶ΩÌï¥ÏñëÎ∞ïÎ¨ºÍ¥Ä",
              place_type: "Î∞ïÎ¨ºÍ¥Ä",
              description: "Ìï¥Ïñë Ï†ÑÏãúÎ¨ºÏùÑ Ï≤¥ÌóòÌï† Ïàò ÏûàÎäî Î∞ïÎ¨ºÍ¥Ä",
              coordinates: {
                latitude: 35.0785402199,
                longitude: 129.0803198368
              },
              accessibility_features: {
                wheelchair_accessible_parking: "Ïû•Ïï†Ïù∏ Ï£ºÏ∞®Ïû• ÏûàÏùå",
                wheelchair_accessible_restroom: "Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§ ÏûàÏùå"
              }
            }
          ]
        },
        {
          day: 2,
          itinerary: [
            {
              time: "Ïò§Ï†Ñ 9:00",
              place_name: "Ìï¥Ïö¥ÎåÄ Ìï¥ÏàòÏöïÏû•",
              place_type: "Í¥ÄÍ¥ëÏßÄ",
              description: "Î¨¥Ïû•Ïï† ÏÇ∞Ï±ÖÎ°úÍ∞Ä ÏûàÎäî Ìï¥Î≥Ä",
              coordinates: {
                latitude: 35.1586,
                longitude: 129.1603
              },
              accessibility_features: {
                wheelchair_accessible_path: "Î¨¥Ïû•Ïï† ÏÇ∞Ï±ÖÎ°ú ÏûàÏùå",
                wheelchair_accessible_restroom: "Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§ ÏûàÏùå"
              }
            }
          ]
        },
        {
          day: 3,
          itinerary: [
            {
              time: "Ïò§Ï†Ñ 9:00",
              place_name: "Î∂ÄÏÇ∞ÏãúÎ¶ΩÎ∞ïÎ¨ºÍ¥Ä",
              place_type: "Î∞ïÎ¨ºÍ¥Ä",
              description: "Î∂ÄÏÇ∞Ïùò Ïó≠ÏÇ¨Î•º Ïïå Ïàò ÏûàÎäî Î∞ïÎ¨ºÍ¥Ä",
              coordinates: {
                latitude: 35.1531,
                longitude: 129.1183
              },
              accessibility_features: {
                wheelchair_accessible_parking: "Ïû•Ïï†Ïù∏ Ï£ºÏ∞®Ïû• ÏûàÏùå",
                wheelchair_accessible_restroom: "Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§ ÏûàÏùå"
              }
            }
          ]
        }
      ]
    }
  ],
  metadata: {
    region: "Î∂ÄÏÇ∞",
    duration: 3,
    keywords: "Î¨¥Ïû•Ïï†, Î∞îÎã§, Í∞ÄÏ°±ÎèôÎ∞ò",
    generated_at: "2024-04-02T00:00:48.628817",
    start_date: "2024-04-15",
    end_date: "2024-04-17"
  }
};

function CourseCreatePage() {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [courseData, setCourseData] = useState(mockCourseData);
  const [selectedDay, setSelectedDay] = useState(1);
  const [placesByDay, setPlacesByDay] = useState({});
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ - Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞Î•º ÌôîÎ©¥Ïóê ÌëúÏãúÌïòÍ∏∞ Ï¢ãÏùÄ ÌòïÌÉúÎ°ú Î≥ÄÌôò
  useEffect(() => {
    console.log("courseData:", courseData);

    if (!courseData?.recommended_courses?.[0]?.days) {
      console.log("No course data available");
      return;
    }

    const course = courseData.recommended_courses[0];
    const processedPlaces = {};

    // Í∞Å ÏùºÏ∞®Î≥Ñ Ïû•ÏÜå Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
    course.days.forEach(dayData => {
      console.log("Processing day:", dayData);
      
      processedPlaces[dayData.day] = dayData.itinerary.map((item, index) => ({
        id: `${dayData.day}-${index}`,
        time: item.time,
        place_name: item.place_name,
        place_type: item.place_type,
        description: item.description,
        lat: item.coordinates.latitude,
        lng: item.coordinates.longitude,
        accessibility_features: item.accessibility_features
      }));
    });

    console.log("Processed places:", processedPlaces);
    setPlacesByDay(processedPlaces);
  }, [courseData]);

  // ÏßÄÎèÑ Í¥ÄÎ†® ÏÑ§Ï†ï
  const mapRef = useRef(null); // ÏßÄÎèÑÎ•º ÌëúÏãúÌï† DOM ÏöîÏÜå
  const mapInstance = useRef(null); // Íµ¨Í∏Ä ÏßÄÎèÑ Ïù∏Ïä§ÌÑ¥Ïä§
  const markers = useRef([]); // ÏßÄÎèÑÏóê ÌëúÏãúÎê† ÎßàÏª§Îì§
  const pathLine = useRef(null); // Í≤ΩÎ°úÎ•º ÌëúÏãúÌï† ÏÑ†

  // Íµ¨Í∏Ä ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (window.google && mapRef.current) {
      // Ï≤´ Î≤àÏß∏ Ïû•ÏÜåÏùò Ï¢åÌëúÎ•º Í∏∞Î≥∏ Ï§ëÏã¨Ï†êÏúºÎ°ú ÏÑ§Ï†ï
      const defaultCenter = { 
        lat: courseData.recommended_courses[0]?.days[0]?.itinerary[0]?.coordinates.latitude || 35.1795543,
        lng: courseData.recommended_courses[0]?.days[0]?.itinerary[0]?.coordinates.longitude || 129.0756416
      };
      
      mapInstance.current = new window.google.maps.Map(mapRef.current, {
        center: defaultCenter,
        zoom: 13,
      });
    }
  }, []);

  // ÏÑ†ÌÉùÎêú ÏùºÏ∞®Ïùò Ïû•ÏÜåÎì§ÏùÑ ÏßÄÎèÑÏóê ÌëúÏãú
  useEffect(() => {
    if (!mapInstance.current) return;

    // Í∏∞Ï°¥ ÎßàÏª§ÏôÄ Í≤ΩÎ°ú ÏÇ≠Ï†ú
    markers.current.forEach(marker => marker.setMap(null));
    markers.current = [];
    if (pathLine.current) {
      pathLine.current.setMap(null);
      pathLine.current = null;
    }

    const currentPlaces = placesByDay[selectedDay] || [];
    const pathCoordinates = [];

    // ÏÉà ÎßàÏª§ ÏÉùÏÑ± Î∞è Ï†ïÎ≥¥Ï∞Ω ÏÑ§Ï†ï
    currentPlaces.forEach((place, idx) => {
      const marker = new window.google.maps.Marker({
        position: { lat: place.lat, lng: place.lng },
        map: mapInstance.current,
        label: `${idx + 1}`,
        title: place.place_name,
      });

      // ÎßàÏª§ ÌÅ¥Î¶≠Ïãú ÌëúÏãúÎê† Ï†ïÎ≥¥Ï∞Ω ÏÑ§Ï†ï
      const infoWindow = new window.google.maps.InfoWindow({
        content: `
          <div class="info-window">
            <h3>${place.place_name}</h3>
            <p>${place.description || ""}</p>
            <div class="accessibility">
              ${Object.entries(place.accessibility_features || {})
                .map(([key, value]) => `<p>‚Ä¢ ${value}</p>`)
                .join("")}
            </div>
          </div>
        `
      });

      marker.addListener("click", () => {
        infoWindow.open(mapInstance.current, marker);
      });

      markers.current.push(marker);
      pathCoordinates.push({ lat: place.lat, lng: place.lng });
    });

    // Ïû•ÏÜåÎì§ÏùÑ Ïó∞Í≤∞ÌïòÎäî Í≤ΩÎ°úÏÑ† Í∑∏Î¶¨Í∏∞
    if (pathCoordinates.length >= 2) {
      pathLine.current = new window.google.maps.Polyline({
        path: pathCoordinates,
        geodesic: true,
        strokeColor: "#4285F4",
        strokeOpacity: 1.0,
        strokeWeight: 3,
      });
      pathLine.current.setMap(mapInstance.current);
    }

    // ÏßÄÎèÑ Ï§ëÏã¨ Ïù¥Îèô
    if (currentPlaces.length > 0) {
      mapInstance.current.setCenter({ lat: currentPlaces[0].lat, lng: currentPlaces[0].lng });
    }
  }, [selectedDay, placesByDay]);

  // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú Ïû•ÏÜå ÏàúÏÑú Î≥ÄÍ≤Ω
  const handleOnDragEnd = (result) => {
    if (!result.destination) return;

    const items = Array.from(placesByDay[selectedDay]);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    setPlacesByDay({ ...placesByDay, [selectedDay]: items });
  };

  // Ïû•ÏÜå ÏÇ≠Ï†ú Ï≤òÎ¶¨
  const handleDelete = (placeId) => {
    const updatedPlaces = placesByDay[selectedDay].filter(
      (place) => place.id !== placeId
    );
    setPlacesByDay({
      ...placesByDay,
      [selectedDay]: updatedPlaces,
    });
  };

  // ÏãúÍ∞Ñ Î¨∏ÏûêÏó¥ÏùÑ HH:MM ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const formatTimeString = (timeStr) => {
    try {
      console.log("ÏûÖÎ†•Îêú ÏãúÍ∞Ñ Î¨∏ÏûêÏó¥:", timeStr);
      const [period, time] = timeStr.split(" ");
      console.log("ÌååÏã±Îêú ÏãúÍ∞Ñ:", time);
      return time || "09:00";
    } catch (error) {
      console.error("ÏãúÍ∞Ñ ÌòïÏãù Î≥ÄÌôò Ïò§Î•ò:", error);
      return "09:00";
    }
  };

  // ÏãúÍ∞Ñ Î≥ÄÍ≤Ω Ï≤òÎ¶¨
  const handleTimeChange = (placeId, newTime) => {
    try {
      console.log("ÏÉàÎ°ú ÏûÖÎ†•Îêú ÏãúÍ∞Ñ:", newTime);
      const hours = parseInt(newTime.split(":")[0]);
      const period = hours >= 12 ? "Ïò§ÌõÑ" : "Ïò§Ï†Ñ";
      const formattedTime = `${period} ${newTime}`;
      console.log("Ï†ÄÏû•Îê† ÏãúÍ∞Ñ:", formattedTime);

      const updatedPlaces = placesByDay[selectedDay].map(place => {
        if (place.id === placeId) {
          return { ...place, time: formattedTime };
        }
        return place;
      });
      
      setPlacesByDay({
        ...placesByDay,
        [selectedDay]: updatedPlaces,
      });
    } catch (error) {
      console.error("ÏãúÍ∞Ñ Î≥ÄÍ≤Ω Ïò§Î•ò:", error);
    }
  };

  // ÏÉà Ïû•ÏÜå Ï∂îÍ∞Ä Ï≤òÎ¶¨
  const handleAddPlace = (newPlace) => {
    const currentPlaces = placesByDay[selectedDay] || [];
    const nextId = `${selectedDay}-${currentPlaces.length}`;
    
    setPlacesByDay({
      ...placesByDay,
      [selectedDay]: [...currentPlaces, { ...newPlace, id: nextId }],
    });
  };

  // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ - YYYY.MM.DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ko-KR', { 
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
    } catch (error) {
      console.error("Date formatting error:", error);
      return dateString;
    }
  };

  // Ïó¨Ìñâ Í∏∞Í∞Ñ ÌëúÏãú Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
  const getDateDisplay = () => {
    const startDate = courseData?.metadata?.start_date;
    const endDate = courseData?.metadata?.end_date;
    
    if (!startDate || !endDate) return "ÎÇ†Ïßú Ï†ïÎ≥¥ ÏóÜÏùå";
    
    return `${formatDate(startDate)} ~ ${formatDate(endDate)}`;
  };

  // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú ÏÉÅÌÉú Î°úÍπÖ
  console.log("Current state:", {
    selectedDay,
    placesByDay,
    currentDayPlaces: placesByDay[selectedDay]
  });

  // Places ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
  const placesService = useRef(null);
  useEffect(() => {
    if (window.google && window.google.maps && window.google.maps.places && mapInstance.current) {
      placesService.current = new window.google.maps.places.PlacesService(mapInstance.current);
    }
  }, [mapInstance.current]);

  return (
    <div className="course-page">
      <Header />

      <div className="course-main">
        {/* ÏôºÏ™Ω Ìå®ÎÑê - ÏùºÏ†ï Î™©Î°ù */}
        <div className="course-sidebar">
          <h2>{courseData?.metadata?.region || "ÏßÄÏó≠ Ï†ïÎ≥¥ ÏóÜÏùå"}</h2>
          <p className="date">{getDateDisplay()}</p>

          {/* ÏùºÏ∞® ÏÑ†ÌÉù Î≤ÑÌäº */}
          <div className="day-buttons">
            {Array.from({ length: courseData?.metadata?.duration || 0 }, (_, i) => i + 1).map((day) => (
              <button
                key={day}
                className={selectedDay === day ? "active" : ""}
                onClick={() => setSelectedDay(day)}
              >
                {day}ÏùºÏ∞®
              </button>
            ))}
          </div>

          {/* ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏàúÏÑú Î≥ÄÍ≤Ω Í∞ÄÎä•Ìïú Ïû•ÏÜå Î™©Î°ù */}
          <DragDropContext onDragEnd={handleOnDragEnd}>
            <Droppable droppableId="places">
              {(provided) => (
                <div
                  className="course-list"
                  {...provided.droppableProps}
                  ref={provided.innerRef}
                >
                  {/* Í∞Å Ïû•ÏÜå Ïπ¥Îìú */}
                  {(placesByDay[selectedDay] || []).map((place, index) => (
                    <Draggable key={place.id} draggableId={place.id} index={index}>
                      {(provided) => (
                        <div
                          className="course-card"
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                        >
                          <div className="left">
                            <div className="circle-number">{index + 1}</div>
                            <input
                              type="time"
                              defaultValue={formatTimeString(place.time)}
                              onChange={(e) => handleTimeChange(place.id, e.target.value)}
                              className="time-input"
                            />
                            <div className="title">{place.place_name}</div>
                            <div className="place-type">
                              {placeTypeToEmoji[place.place_type] || "üìç Í∏∞ÌÉÄ"}
                            </div>
                            {/* Î¨¥Ïû•Ïï† ÏãúÏÑ§ Ï†ïÎ≥¥ */}
                            <div className="accessibility-info">
                              {Object.entries(place.accessibility_features || {}).map(([key, value]) => (
                                <div key={key} className="accessibility-item">
                                  ‚Ä¢ {value}
                                </div>
                              ))}
                            </div>
                          </div>

                          <div className="right">
                            <div className="action-buttons">
                              <button onClick={() => handleDelete(place.id)}>üóëÔ∏è</button>
                            </div>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>

          {/* ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠ */}
          <div className="footer-buttons">
            <button onClick={() => setIsSearchModalOpen(true)}>+ Ïû•ÏÜå Ï∂îÍ∞Ä</button>
            <div className="button-row">
              <button>Ï†ÄÏû•</button>
              <button>Í≥µÏú†</button>
            </div>
          </div>
        </div>

        {/* Ïò§Î•∏Ï™Ω Ìå®ÎÑê - Íµ¨Í∏Ä ÏßÄÎèÑ */}
        <div className="map-area">
          <div ref={mapRef} style={{ width: "100%", height: "100%" }} />
        </div>
      </div>

      {/* Ïû•ÏÜå Í≤ÄÏÉâ Î™®Îã¨ */}
      <SearchModal
        isOpen={isSearchModalOpen}
        onClose={() => setIsSearchModalOpen(false)}
        onPlaceSelect={handleAddPlace}
        region={courseData?.metadata?.region || ""}
        mapInstance={mapInstance.current}
      />
    </div>
  );
}

/**
 * Ïû•ÏÜå Í≤ÄÏÉâ Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
 * Google Places APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïû•ÏÜåÎ•º Í≤ÄÏÉâÌïòÍ≥† ÏÑ†ÌÉùÌï† Ïàò ÏûàÎäî Î™®Îã¨
 */
const SearchModal = ({ isOpen, onClose, onPlaceSelect, region, mapInstance }) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const placesService = useRef(null);

  // Places ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (window.google && window.google.maps && window.google.maps.places && mapInstance) {
      placesService.current = new window.google.maps.places.PlacesService(mapInstance);
    }
  }, [mapInstance]);

  // Í≤ÄÏÉâ Ìï®Ïàò
  const handleSearch = () => {
    if (!searchQuery.trim()) return;
    
    console.log("Í≤ÄÏÉâ ÏãúÏûë:", searchQuery);
    console.log("Places ÏÑúÎπÑÏä§ ÏÉÅÌÉú:", placesService.current);
    
    setIsLoading(true);
    
    if (!placesService.current) {
      console.error("Places ÏÑúÎπÑÏä§Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
      setIsLoading(false);
      return;
    }

    const request = {
      query: `${region} ${searchQuery}`,
      fields: ['name', 'geometry', 'types', 'formatted_address']
    };

    console.log("Í≤ÄÏÉâ ÏöîÏ≤≠:", request);

    placesService.current.textSearch(request, (results, status) => {
      console.log("Í≤ÄÏÉâ Í≤∞Í≥º ÏÉÅÌÉú:", status);
      console.log("Í≤ÄÏÉâ Í≤∞Í≥º:", results);
      
      setIsLoading(false);
      
      if (status === window.google.maps.places.PlacesServiceStatus.OK && results) {
        const places = results.map(place => ({
          id: place.place_id,
          place_name: place.name,
          place_type: getPlaceType(place.types),
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng(),
          description: place.formatted_address,
          accessibility_features: {
            wheelchair_accessible_parking: "Ï†ïÎ≥¥ ÏóÜÏùå",
            wheelchair_accessible_restroom: "Ï†ïÎ≥¥ ÏóÜÏùå"
          }
        }));
        console.log("Î≥ÄÌôòÎêú Ïû•ÏÜå Îç∞Ïù¥ÌÑ∞:", places);
        setSearchResults(places);
      } else {
        console.error("Í≤ÄÏÉâ Ïã§Ìå®:", status);
        setSearchResults([]);
      }
    });
  };

  // Ïû•ÏÜå ÌÉÄÏûÖ Î≥ÄÌôò
  const getPlaceType = (types) => {
    if (types.includes('restaurant')) return "ÌïúÏãùÎãπ";
    if (types.includes('cafe')) return "Ïπ¥Ìéò";
    if (types.includes('park')) return "Í≥µÏõê";
    if (types.includes('museum')) return "Î∞ïÎ¨ºÍ¥Ä";
    if (types.includes('lodging')) return "Ìò∏ÌÖî";
    return "Í∏∞ÌÉÄ";
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="search-modal">
        <div className="modal-header">
          <h3>{region} Î¨¥Ïû•Ïï† Ïó¨ÌñâÏßÄ Í≤ÄÏÉâ</h3>
          <button onClick={onClose}>‚úï</button>
        </div>
        
        <div className="search-box">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={`${region}Ïùò Î¨¥Ïû•Ïï† Ïó¨ÌñâÏßÄÎ•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî`}
          />
          <button onClick={handleSearch} disabled={isLoading}>
            {isLoading ? 'Í≤ÄÏÉâ Ï§ë...' : 'Í≤ÄÏÉâ'}
          </button>
        </div>

        <div className="search-results">
          {searchResults.map((place) => (
            <div
              key={place.id}
              className="search-result-item"
              onClick={() => {
                onPlaceSelect({
                  ...place,
                  time: "09:00",
                });
                onClose();
              }}
            >
              <div>
                <div className="place-name">{place.place_name}</div>
                <div className="place-address">{place.description}</div>
              </div>
              <div className="place-type">{placeTypeToEmoji[place.place_type] || "üìç Í∏∞ÌÉÄ"}</div>
            </div>
          ))}
          {searchResults.length === 0 && searchQuery && !isLoading && (
            <div className="no-results">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CourseCreatePage;
